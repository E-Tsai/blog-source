---
title: Deadlock
date: 2017-04-14 11:28:48
tags: os
categories: cs
---

A set of blocked processes each holding a resource and waiting to acquire a resource held by another process in the set.    
 <!-- more -->
## System Model
#### a finite number of resources 
#### partitioned into several types, each consisting of some number of identical(=equivalent) instances(physical & logical resources).
#### System model   
 &emsp;&emsp; 
* Resource types R1, R2, ..., Rm    
  &emsp;&emsp;
* Each resource type Ri has Wi instances.  
  &emsp;&emsp;
* Each process may utilize a resource only as follows:  
  &emsp;&emsp;&emsp;&emsp;
  a) request: may wait until it can acquire the resource.  
  &emsp;&emsp;&emsp;&emsp;
  b) use  
  &emsp;&emsp;&emsp;&emsp;
  c) release  
## Deadlock Characterization
### Necessary Conditions  
#### Mutual exclusion(互斥):
only one process at a time can use a resource.
#### Hold and wait(持有并等待):
a process holding at least one resource is waiting to
acquire additional resources held by other processes.
#### No preemption(不剥夺):
a resource can be released only voluntarily by the process
holding it, after that process has completed its task.
#### Circular wait(循环等待)
### Resource-Allocation Graph
#### V:
* P = {P1, P2, : : : , Pn}, the set consisting of all the
  processes in the system.
  : Process
* R = {R1, R2, : : : , Rm}, the set consisting of all resource
  types in the system.
#### E:
* request edge – directed edge Pi →  Rj
* assignment edge – directed edge Rj → Pi
#### Basic Facts
* If graph contains no cycles:   
  no deadlock.
* If graph contains a cycle:   
  &emsp; &emsp; 
  a) if only one instance per resource type, then deadlock.  
  &emsp; &emsp; 
  b) if several instances per resource type, possibility of
  deadlock.
## Methods for Handling Deadlocks
request → allocation → runtime  
 ↑&emsp; &emsp; &emsp;  ↑&emsp; &emsp; &emsp;&emsp; &emsp; &emsp; ↑   
prevention avoidance &emsp;detection and recovery
### Deadlock Prevention 
#### Mutual Exclusion：   
*  not required for sharable resources (read-only files);must hold for nonsharable resources. (printer)  
*  In general, we cannot deny the
  mutual-exclusion condition
#### Hold and Wait：
*  whenever a process requests a resource,
  it does not hold any other resources.  
   &emsp; &emsp;
  1 Require process to request and be allocated all its
  resources before it begins execution, or  
   &emsp; &emsp;
  2 allow process to request resources only when the process has
  none.  
*  Disadvantage:  
   &emsp; &emsp;
   1 Low resource utilization;  
   &emsp; &emsp;
   2 starvation possible.  
#### No Preemption
#### Circular Wait:
* impose a total ordering of all resource types, and require
  that each process requests resources in an increasing order
  of enumeration.  
   &emsp; &emsp;
  1 always in an increasing order  
   &emsp; &emsp; 
  2 may release some higher ordered   resource before requesting lower ordered resource
### Deadlock Avoidance 
###### Requires that the system has some additional a priori information available.
* Simplest and most useful model requires that each process
  declare the maximum number of resources of each type that
  it may need.
* The deadlock-avoidance algorithm dynamically examines the
  resource-allocation state to ensure that there can never
  be a circular-wait condition.
* Resource-allocation state is defined by the number of
  available and allocated resource
### Safe State 
###### When a process requests an available resource, system must decide if immediate allocation leaves the system in a safe state.
* If a system is in safe state: no deadlocks.  
* If a system is in unsafe state: possibility of deadlock.  
* Avoidance: ensure that a system will never enter an unsafe state.  
  System is in safe state if there exists a (safe) sequence: < P1; P2; ...; Pn >
### Resource-Allocation Graph Scheme
* Claim edge:Pi → Rj  
   &emsp;&emsp;
   indicated that process Pj may request resource Rj;  
    &emsp;&emsp;
   represented by a dashed line.
* Claim edge converts to request edge when a process requests a resource.
* Request edge converted to an assignment edge when the resource is allocated to the process.  
* When a resource is released by a process, assignment edge reconverts to a claim edge.
* Resources must be claimed a priori in the system.
